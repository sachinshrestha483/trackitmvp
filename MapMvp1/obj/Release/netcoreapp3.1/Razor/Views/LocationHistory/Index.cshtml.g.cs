#pragma checksum "C:\Users\sachi\source\repos\MapMvp1\MapMvp1\Views\LocationHistory\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fead94d6ca5b543d323cb36793e8c1e6fa404244"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_LocationHistory_Index), @"mvc.1.0.view", @"/Views/LocationHistory/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\sachi\source\repos\MapMvp1\MapMvp1\Views\_ViewImports.cshtml"
using MapMvp1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\sachi\source\repos\MapMvp1\MapMvp1\Views\_ViewImports.cshtml"
using MapMvp1.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fead94d6ca5b543d323cb36793e8c1e6fa404244", @"/Views/LocationHistory/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"89ffb5761c97e05b51353c617d049bbecb0362b8", @"/Views/_ViewImports.cshtml")]
    public class Views_LocationHistory_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\sachi\source\repos\MapMvp1\MapMvp1\Views\LocationHistory\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

    <div id=""app"">
        <h1>Index</h1>



        <label>Vehicle Id</label>
        <input type=""number"" class=""form-control"" v-model=""vehicleId"" id=""exampleInputEmail1"" aria-describedby=""emailHelp"">
        <button class=""btn btn-primary mt-2"" v-on:click=""getLocationHistory"">Get History</button>

        <br />


");
            WriteLiteral(@"

        <br />
        <button class=""btn btn-primary m-2"">play 0.5x</button>

        <button  class=""btn btn-primary m-2""  v-on:click=""playLocationHistoryonMap(1)"">play 1x</button>
        <button class=""btn btn-primary m-2"" >play 1.5x</button>
        <button  class=""btn btn-primary m-2"" >play 1.75x</button>
        <button  class=""btn btn-primary m-2"" >play 2x</button>

        <br />




        <div class=""container  mx-4 text-center"">
            <div id=""mapid"" ref=""map""></div>

        </div>

        <button class=""btn btn-primary "" v-on:click=""drawGraph"">Show Graph </button>

        <div id=""chartContainer"" style=""        height: 300px;
        width: 100%;
        overflow-x: scroll;
"">



        </div>




");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"

                <script>

                    const { createApp, ref, watch, onMounted } = Vue;




                    const App = {
                        setup() {


                            console.log(""It is Here "");

                            const map = ref(null);


                            const vehicleId = ref(null);


                            const locationHistories = ref([]);



                            var locationDto = ref([]);








                            var mymap;




                            onMounted(() => {
                                console.log(map);
                                console.log(""Making The map"");
                                mymap = L.map(map.value).setView([23.3315, 75.0367], 5);
                                const tileUrl = ""https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"";

                                const attribution =
                                    '&copy; <a href=""https://w");
                WriteLiteral(@"ww.openstreetmap.org/copyright"">OpenStreetMap</a> contributors';

                                const tileLayer = L.tileLayer(tileUrl, { attribution });
                                tileLayer.addTo(mymap);
                            });





                          async  function delay(n) {
                                return new Promise(function (resolve) {
                                    setTimeout(resolve, n * 1000);
                                });
                            }

                            var prevMarker = null;

                            const playLocationHistoryonMap = async (speed) => {








                                for (const item in locationHistories.value) {
                                    await delay(5);


                                    if (prevMarker != null) {

                                        console.log(""remove layer"")
                                        mymap.removeLayer(prevMarker);
         ");
                WriteLiteral(@"                           }

                                    console.log(item);

                                    //                              setTimeout(function () {

                                    var marker = new L.Marker([item.latitude, item.longitude]);

                                    marker.bindPopup(""<b>Vehicle Name "" + item.id + "" <b><p>Location on :"" + new Date(item.locationOn).toLocaleTimeString() + ""</p><p>Speed:"" + item.speed + ""</p>"");

                                    marker.addTo(mymap)


                                    marker.openPopup();


                                    prevMarker = marker;


                                }





                                //locationHistories.value.forEach(item => {

                                //    await delay(5);


                                //    if (prevMarker != null) {

                                //        console.log(""remove layer"")
                                /");
                WriteLiteral(@"/        mymap.removeLayer(prevMarker);
                                //    }

                                //    console.log(item);

                                //    //                              setTimeout(function () {

                                //    var marker = new L.Marker([item.latitude, item.longitude]);

                                //    marker.bindPopup(""<b>Vehicle Name "" + item.id + "" <b><p>Location on :"" + new Date(item.locationOn).toLocaleTimeString() + ""</p><p>Speed:"" + item.speed + ""</p>"");

                                //    marker.addTo(mymap)


                                //    marker.openPopup();


                                //    prevMarker = marker;

                                //    //}, 5000);



                                //})


                            }



                            const getLocationHistory = async () => {

                                console.log(""Location History Is Here "")


    ");
                WriteLiteral(@"                            if (vehicleId.value != null) {


                                    console.log(vehicleId.value);

                                    await axios.get('/api/VehicleHistory/GetLocationHistory?id=' + vehicleId.value)
                                        .then(function (response) {
                                            // handle success
                                            console.log(response);
                                            locationHistories.value = response.data;
                                            locationHistories.value.forEach(element => {



                                                var date = new Date(element.locationOn);


                                                let obj = {
                                                    //dateTime: element.locationOn,
                                                    //new Date(item.locationOn)
                                                    
    //           ");
                WriteLiteral(@"                                 dateTime: new Date(date.toString()),

                                                    dateTime: date.toLocaleTimeString(),
                                                    speed: element.speed,
                                                    latitude: element.latitude,
                                                    longitude: element.longitude

                                                }


                                                console.log(obj);


                                                locationDto.value.push(obj)

                                                drawRoute();






                                            });




                                        })
                                        .catch(function (error) {
                                            // handle error
                                            console.log(error);
                                        })
    ");
                WriteLiteral(@"                                    .then(function () {
                                            // always executed
                                        });




                                }




                            }





                            const drawRoute = () => {


                                var latlngs = locationHistories.value.map((item) => {

                                    return [item.latitude, item.longitude]

                                });



                                console.log(""lat long"");
                                console.log(latlngs);
                                console.log(""lat long"")



                                var polyline = L.polyline(latlngs, { color: 'red' }).addTo(mymap);

                                // zoom the map to the polyline
                                mymap.fitBounds(polyline.getBounds());

                            }










                            c");
                WriteLiteral(@"onst drawGraph = () => {

                                var cordinates = [];

                                cordinates = locationHistories.value.map((item) => {
                                    console.log(item);
                                    return {
                                        x: new Date(item.locationOn), y: item.speed, lat: item.latitude, lon: item.longitude, speed: item.speed
                                    }

                                });


                                console.log(cordinates);


                                console.log(locationDto);


                                var chart = new CanvasJS.Chart(""chartContainer"",
                                    {
                                        animationEnabled: true,
                                        theme: ""light2"",
                                        zoomEnabled: true,
                                        title: {
                                            te");
                WriteLiteral(@"xt: ""Simple Date-Time Chart""
                                        },
                                        axisX: {
                                            title: ""timeline"",
                                            gridThickness: 2
                                        },
                                        axisY: {
                                            title: ""Downloads""
                                        },
                                        data: [
                                            {
                                                type: ""line"",
                                                click: onClick,
                                                dataPoints: cordinates
                                            }
                                        ]
                                    });



                                let previousMarker = null;
                                function onClick(e) {
                        ");
                WriteLiteral(@"            // alert(e);
                                    console.log(e);

                                    if (previousMarker != null) {
                                        mymap.removeLayer(previousMarker);
                                    }

                                    let newMarker = L.marker([e.dataPoint.lat, e.dataPoint.lon]);


                                    newMarker.bindPopup(""<b>Vehicle  name</b>  <br>  <p>Date And Time:"" + e.dataPoint.x + ""</p>  <p>Speed: "" + e.dataPoint.speed + ""Km/h"" + ""</p>        "").openPopup();

                                    newMarker.addTo(mymap);
                                    newMarker.openPopup();


                                    previousMarker = newMarker;


                                }
                                chart.render();



                            }










                            return {
                                getLocationHistory,
                          ");
                WriteLiteral(@"      vehicleId,
                                locationHistories,
                                map,
                                drawGraph,
                                playLocationHistoryonMap
                            }

                        }
                    }


                    createApp(App).mount(""#app"");
                </script>

        ");
            }
            );
            WriteLiteral("\r\n\r\n\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
